{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getRolesList, deleteRight, getRight, allotRight } from \"../../api\";\nexport default {\n  name: \"Roles\",\n  data() {\n    return {\n      // 所有角色列表\n      roleList: [],\n      isVisible: false,\n      // 所有权限列表\n      rightList: [],\n      // 树形控件的属性绑定对象\n      treeProps: {\n        label: \"authName\",\n        children: \"children\"\n      },\n      // 默认选中的节点ID值\n      defKeys: [],\n      // 当前即将分配权限的角色id\n      roleId: \"\"\n    };\n  },\n  methods: {\n    // 获取权限列表(封装)\n    getRoleList() {\n      getRolesList().then(({\n        data\n      }) => {\n        if (data.meta.status !== 200) {\n          return this.$message.error(\"获取角色列表失败！\");\n        }\n        this.roleList = data.data;\n      });\n    },\n    // 根据id删除对应权限\n    removeRight(role, rightId) {\n      this.$confirm(\"此操作将永久删除该权限, 是否继续?\", \"提示\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(() => {\n        this.$message({\n          type: \"success\",\n          message: \"删除成功!\"\n        });\n        deleteRight(role, rightId).then(({\n          data\n        }) => {\n          // this.getRoleList\n          // 重新将角色的权限赋值一次\n          role.children = data.data;\n        });\n      }).catch(() => {\n        this.$message({\n          type: \"info\",\n          message: \"已取消删除\"\n        });\n      });\n    },\n    // 展示分配权限的对话框\n    showSetRight(role) {\n      // 保存角色的id到数据中 方便后面的角色分配权限请求\n      this.roleId = role.id;\n      // 获取所有权限树形数据\n      getRight().then(({\n        data\n      }) => {\n        // console.log(data);\n        if (data.meta.status !== 200) {\n          return this.$message.error(\"获取权限失败\");\n        }\n        this.rightList = data.data;\n      });\n      // 递归获取三级节点的id 角色role是最父级的节点拿到后开始递归\n      this.defKeys = []; // 每次点击前先清空之前的数据再赋值\n      this.getLeafKeys(role, this.defKeys);\n      this.isVisible = true;\n    },\n    // 通过递归的形式获取角色下所有三级的权限并保存到数组\n    getLeafKeys(node, arr) {\n      // 如果当前node节点不包含children属性则是三级节点\n      if (!node.children) {\n        return arr.push(node.id);\n      }\n      node.children.forEach(item => {\n        this.getLeafKeys(item, arr);\n      });\n    },\n    // 为角色分配权限\n    allotRights() {\n      const keys = [...this.$refs.treeRef.getCheckedKeys(), ...this.$refs.treeRef.getHalfCheckedKeys()];\n      // 每个id之间用，拼接成字符串\n      const idStr = keys.join(\",\");\n      getRight().then(({\n        data\n      }) => {\n        console.log(data);\n      });\n      this.isVisible = false;\n    }\n  },\n  mounted() {\n    this.getRoleList();\n  }\n};","map":{"version":3,"names":["getRolesList","deleteRight","getRight","allotRight","name","data","roleList","isVisible","rightList","treeProps","label","children","defKeys","roleId","methods","getRoleList","then","meta","status","$message","error","removeRight","role","rightId","$confirm","confirmButtonText","cancelButtonText","type","message","catch","showSetRight","id","getLeafKeys","node","arr","push","forEach","item","allotRights","keys","$refs","treeRef","getCheckedKeys","getHalfCheckedKeys","idStr","join","console","log","mounted"],"sources":["src/views/power/Roles.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\r\n      <el-breadcrumb-item :to=\"{ path: '/home' }\">首页</el-breadcrumb-item>\r\n      <el-breadcrumb-item>权限管理</el-breadcrumb-item>\r\n      <el-breadcrumb-item>角色列表</el-breadcrumb-item>\r\n    </el-breadcrumb>\r\n    <!-- 卡片 -->\r\n    <el-card>\r\n      <el-row>\r\n        <el-col>\r\n          <el-button type=\"primary\">添加角色</el-button>\r\n        </el-col>\r\n      </el-row>\r\n      <!-- 角色列表区域 -->\r\n      <el-table :data=\"roleList\" border stripe>\r\n        <!-- 展开列 -->\r\n        <el-table-column type=\"expand\">\r\n          <template slot-scope=\"scope\">\r\n            <el-row\r\n              v-for=\"(item1, index1) in scope.row.children\"\r\n              :class=\"['bdbottom', index1 === 0 ? 'bdtop' : '', 'vcenter']\"\r\n              :key=\"item1.id\"\r\n            >\r\n              <!-- 一级权限 -->\r\n              <el-col :span=\"5\">\r\n                <el-tag closable @close=\"removeRight(scope.row, item1.id)\">\r\n                  {{ item1.authName }}\r\n                </el-tag>\r\n                <i class=\"el-icon-caret-right\"></i>\r\n              </el-col>\r\n              <!-- 二级和三级权限 -->\r\n              <el-col :span=\"19\">\r\n                <!-- 通过 for 循环 嵌套渲染二级权限 -->\r\n                <el-row\r\n                  :class=\"[index2 === 0 ? '' : 'bdtop', 'vcenter']\"\r\n                  v-for=\"(item2, index2) in item1.children\"\r\n                  :key=\"item2.id\"\r\n                >\r\n                  <el-col :span=\"6\">\r\n                    <el-tag\r\n                      type=\"success\"\r\n                      closable\r\n                      @close=\"removeRight(scope.row, item2.id)\"\r\n                      >{{ item2.authName }}</el-tag\r\n                    >\r\n                    <i class=\"el-icon-caret-right\"></i>\r\n                  </el-col>\r\n                  <!-- 三级 -->\r\n                  <el-col :span=\"18\">\r\n                    <el-tag\r\n                      v-for=\"(item3, index3) in item2.children\"\r\n                      :key=\"item3.id\"\r\n                      type=\"warning\"\r\n                      closable\r\n                      @close=\"removeRight(scope.row, item3.id)\"\r\n                      >{{ item3.authName }}</el-tag\r\n                    >\r\n                  </el-col>\r\n                </el-row>\r\n              </el-col>\r\n            </el-row>\r\n          </template>\r\n        </el-table-column>\r\n        <!-- 索引列 -->\r\n        <el-table-column type=\"index\"></el-table-column>\r\n        <el-table-column label=\"角色名称\" prop=\"roleName\"></el-table-column>\r\n        <el-table-column label=\"角色描述\" prop=\"roleDesc\"></el-table-column>\r\n        <el-table-column label=\"操作\" width=\"300px\">\r\n          <template slot-scope=\"scope\">\r\n            <el-button size=\"mini\" type=\"primary\" icon=\"el-icon-edit\"\r\n              >编辑</el-button\r\n            >\r\n            <el-button size=\"mini\" type=\"danger\" icon=\"el-icon-delete\"\r\n              >删除</el-button\r\n            >\r\n            <el-button\r\n              size=\"mini\"\r\n              type=\"warning\"\r\n              icon=\"el-icon-setting\"\r\n              @click=\"showSetRight(scope.row)\"\r\n              >分配权限</el-button\r\n            >\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n    </el-card>\r\n    <!-- 分配权限对话框 -->\r\n    <el-dialog title=\"分配权限\" :visible.sync=\"isVisible\" width=\"50%\">\r\n      <el-tree\r\n        :data=\"rightList\"\r\n        :props=\"treeProps\"\r\n        show-checkbox\r\n        node-key=\"id\"\r\n        default-expand-all\r\n        :default-checked-keys=\"defKeys\"\r\n        ref=\"treeRef\"\r\n      ></el-tree>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"isVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"allotRights\">确 定</el-button>\r\n      </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getRolesList, deleteRight, getRight, allotRight } from \"../../api\";\r\nexport default {\r\n  name: \"Roles\",\r\n  data() {\r\n    return {\r\n      // 所有角色列表\r\n      roleList: [],\r\n      isVisible: false,\r\n      // 所有权限列表\r\n      rightList: [],\r\n      // 树形控件的属性绑定对象\r\n      treeProps: {\r\n        label: \"authName\",\r\n        children: \"children\",\r\n      },\r\n      // 默认选中的节点ID值\r\n      defKeys: [],\r\n      // 当前即将分配权限的角色id\r\n      roleId: \"\",\r\n    };\r\n  },\r\n  methods: {\r\n    // 获取权限列表(封装)\r\n    getRoleList() {\r\n      getRolesList().then(({ data }) => {\r\n        if (data.meta.status !== 200) {\r\n          return this.$message.error(\"获取角色列表失败！\");\r\n        }\r\n        this.roleList = data.data;\r\n      });\r\n    },\r\n    // 根据id删除对应权限\r\n    removeRight(role, rightId) {\r\n      this.$confirm(\"此操作将永久删除该权限, 是否继续?\", \"提示\", {\r\n        confirmButtonText: \"确定\",\r\n        cancelButtonText: \"取消\",\r\n        type: \"warning\",\r\n      })\r\n        .then(() => {\r\n          this.$message({\r\n            type: \"success\",\r\n            message: \"删除成功!\",\r\n          });\r\n          deleteRight(role, rightId).then(({ data }) => {\r\n            // this.getRoleList\r\n            // 重新将角色的权限赋值一次\r\n            role.children = data.data;\r\n          });\r\n        })\r\n        .catch(() => {\r\n          this.$message({\r\n            type: \"info\",\r\n            message: \"已取消删除\",\r\n          });\r\n        });\r\n    },\r\n    // 展示分配权限的对话框\r\n    showSetRight(role) {\r\n      // 保存角色的id到数据中 方便后面的角色分配权限请求\r\n      this.roleId = role.id;\r\n      // 获取所有权限树形数据\r\n      getRight().then(({ data }) => {\r\n        // console.log(data);\r\n        if (data.meta.status !== 200) {\r\n          return this.$message.error(\"获取权限失败\");\r\n        }\r\n        this.rightList = data.data;\r\n      });\r\n      // 递归获取三级节点的id 角色role是最父级的节点拿到后开始递归\r\n      this.defKeys = []; // 每次点击前先清空之前的数据再赋值\r\n      this.getLeafKeys(role, this.defKeys);\r\n      this.isVisible = true;\r\n    },\r\n    // 通过递归的形式获取角色下所有三级的权限并保存到数组\r\n    getLeafKeys(node, arr) {\r\n      // 如果当前node节点不包含children属性则是三级节点\r\n      if (!node.children) {\r\n        return arr.push(node.id);\r\n      }\r\n      node.children.forEach((item) => {\r\n        this.getLeafKeys(item, arr);\r\n      });\r\n    },\r\n    // 为角色分配权限\r\n    allotRights() {\r\n      const keys = [\r\n        ...this.$refs.treeRef.getCheckedKeys(),\r\n        ...this.$refs.treeRef.getHalfCheckedKeys(),\r\n      ];\r\n      // 每个id之间用，拼接成字符串\r\n      const idStr = keys.join(\",\");\r\n      getRight().then(({ data }) => {\r\n        console.log(data);\r\n      });\r\n\r\n      this.isVisible = false;\r\n    },\r\n  },\r\n  mounted() {\r\n    this.getRoleList();\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.el-tag {\r\n  margin: 7px 7px 10px 20px;\r\n}\r\n.bdtop {\r\n  border-top: 1px solid #eee;\r\n}\r\n.bdbottom {\r\n  border-bottom: 1px solid #eee;\r\n}\r\n.vcenter {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n</style>"],"mappings":";AA2GA,SAAAA,YAAA,EAAAC,WAAA,EAAAC,QAAA,EAAAC,UAAA;AACA;EACAC,IAAA;EACAC,KAAA;IACA;MACA;MACAC,QAAA;MACAC,SAAA;MACA;MACAC,SAAA;MACA;MACAC,SAAA;QACAC,KAAA;QACAC,QAAA;MACA;MACA;MACAC,OAAA;MACA;MACAC,MAAA;IACA;EACA;EACAC,OAAA;IACA;IACAC,YAAA;MACAf,YAAA,GAAAgB,IAAA;QAAAX;MAAA;QACA,IAAAA,IAAA,CAAAY,IAAA,CAAAC,MAAA;UACA,YAAAC,QAAA,CAAAC,KAAA;QACA;QACA,KAAAd,QAAA,GAAAD,IAAA,CAAAA,IAAA;MACA;IACA;IACA;IACAgB,YAAAC,IAAA,EAAAC,OAAA;MACA,KAAAC,QAAA;QACAC,iBAAA;QACAC,gBAAA;QACAC,IAAA;MACA,GACAX,IAAA;QACA,KAAAG,QAAA;UACAQ,IAAA;UACAC,OAAA;QACA;QACA3B,WAAA,CAAAqB,IAAA,EAAAC,OAAA,EAAAP,IAAA;UAAAX;QAAA;UACA;UACA;UACAiB,IAAA,CAAAX,QAAA,GAAAN,IAAA,CAAAA,IAAA;QACA;MACA,GACAwB,KAAA;QACA,KAAAV,QAAA;UACAQ,IAAA;UACAC,OAAA;QACA;MACA;IACA;IACA;IACAE,aAAAR,IAAA;MACA;MACA,KAAAT,MAAA,GAAAS,IAAA,CAAAS,EAAA;MACA;MACA7B,QAAA,GAAAc,IAAA;QAAAX;MAAA;QACA;QACA,IAAAA,IAAA,CAAAY,IAAA,CAAAC,MAAA;UACA,YAAAC,QAAA,CAAAC,KAAA;QACA;QACA,KAAAZ,SAAA,GAAAH,IAAA,CAAAA,IAAA;MACA;MACA;MACA,KAAAO,OAAA;MACA,KAAAoB,WAAA,CAAAV,IAAA,OAAAV,OAAA;MACA,KAAAL,SAAA;IACA;IACA;IACAyB,YAAAC,IAAA,EAAAC,GAAA;MACA;MACA,KAAAD,IAAA,CAAAtB,QAAA;QACA,OAAAuB,GAAA,CAAAC,IAAA,CAAAF,IAAA,CAAAF,EAAA;MACA;MACAE,IAAA,CAAAtB,QAAA,CAAAyB,OAAA,CAAAC,IAAA;QACA,KAAAL,WAAA,CAAAK,IAAA,EAAAH,GAAA;MACA;IACA;IACA;IACAI,YAAA;MACA,MAAAC,IAAA,IACA,QAAAC,KAAA,CAAAC,OAAA,CAAAC,cAAA,IACA,QAAAF,KAAA,CAAAC,OAAA,CAAAE,kBAAA,GACA;MACA;MACA,MAAAC,KAAA,GAAAL,IAAA,CAAAM,IAAA;MACA3C,QAAA,GAAAc,IAAA;QAAAX;MAAA;QACAyC,OAAA,CAAAC,GAAA,CAAA1C,IAAA;MACA;MAEA,KAAAE,SAAA;IACA;EACA;EACAyC,QAAA;IACA,KAAAjC,WAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}